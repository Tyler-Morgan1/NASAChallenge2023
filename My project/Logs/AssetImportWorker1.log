Unity Editor version:    2023.1.16f1 (e5ad54273a6f)
Branch:                  2023.1/staging
Build type:              Release
Batch mode:              YES
macOS version:           Version 13.4.1 (c) (Build 22F770820d)
Darwin version:          22.5.0
Architecture:            x86_64
Running under Rosetta:   NO
Available memory:        16384 MB
Using pre-set license
Pro License: YES

COMMAND LINE ARGUMENTS:
/Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/MacOS/Unity
-adb2
-batchMode
-noUpm
-name
AssetImportWorker1
-projectPath
/Users/thomasfagan/Developer/NASAChallenge2023/My project
-logFile
Logs/AssetImportWorker1.log
-srvPort
51141
Successfully changed project path to: /Users/thomasfagan/Developer/NASAChallenge2023/My project
/Users/thomasfagan/Developer/NASAChallenge2023/My project
[UnityMemory] Configuration Parameters - Can be set up in boot.config
    "memorysetup-bucket-allocator-granularity=16"
    "memorysetup-bucket-allocator-bucket-count=8"
    "memorysetup-bucket-allocator-block-size=33554432"
    "memorysetup-bucket-allocator-block-count=8"
    "memorysetup-main-allocator-block-size=16777216"
    "memorysetup-thread-allocator-block-size=16777216"
    "memorysetup-gfx-main-allocator-block-size=16777216"
    "memorysetup-gfx-thread-allocator-block-size=16777216"
    "memorysetup-cache-allocator-block-size=4194304"
    "memorysetup-typetree-allocator-block-size=2097152"
    "memorysetup-profiler-bucket-allocator-granularity=16"
    "memorysetup-profiler-bucket-allocator-bucket-count=8"
    "memorysetup-profiler-bucket-allocator-block-size=33554432"
    "memorysetup-profiler-bucket-allocator-block-count=8"
    "memorysetup-profiler-allocator-block-size=16777216"
    "memorysetup-profiler-editor-allocator-block-size=1048576"
    "memorysetup-temp-allocator-size-main=16777216"
    "memorysetup-job-temp-allocator-block-size=2097152"
    "memorysetup-job-temp-allocator-block-size-background=1048576"
    "memorysetup-job-temp-allocator-reduction-small-platforms=262144"
    "memorysetup-allocator-temp-initial-block-size-main=262144"
    "memorysetup-allocator-temp-initial-block-size-worker=262144"
    "memorysetup-temp-allocator-size-background-worker=32768"
    "memorysetup-temp-allocator-size-job-worker=262144"
    "memorysetup-temp-allocator-size-preload-manager=33554432"
    "memorysetup-temp-allocator-size-nav-mesh-worker=65536"
    "memorysetup-temp-allocator-size-audio-worker=65536"
    "memorysetup-temp-allocator-size-cloud-worker=32768"
    "memorysetup-temp-allocator-size-gi-baking-worker=262144"
    "memorysetup-temp-allocator-size-gfx=262144"
Player connection [140704746346048] Host "[IP] 10.20.31.0 [Port] 0 [Flags] 2 [Guid] 3677270955 [EditorId] 3677270955 [Version] 1048832 [Id] OSXEditor(0,Thomass-MacBook-Pro-2.local) [Debug] 1 [PackageName] OSXEditor [ProjectName] Editor" joined multi-casting on [225.0.0.222:54997]...

Player connection [140704746346048] Host "[IP] 10.20.31.0 [Port] 0 [Flags] 2 [Guid] 3677270955 [EditorId] 3677270955 [Version] 1048832 [Id] OSXEditor(0,Thomass-MacBook-Pro-2.local) [Debug] 1 [PackageName] OSXEditor [ProjectName] Editor" joined alternative multi-casting on [225.0.0.222:34997]...

[Physics::Module] Initialized MultithreadedJobDispatcher with 7 workers.
Library Redirect Path: Library/Refreshing native plugins compatible for Editor in 5.33 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Initialize engine version: 2023.1.16f1 (e5ad54273a6f)
[Subsystems] Discovering subsystems at path /Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/Resources/UnitySubsystems
[Subsystems] Discovering subsystems at path /Users/thomasfagan/Developer/NASAChallenge2023/My project/Assets
GfxDevice: creating device client; threaded=0; jobified=0
Color LCD preferred device: Intel(R) Iris(TM) Plus Graphics (low power)
Metal devices available: 1
0: Intel(R) Iris(TM) Plus Graphics (low power)
Using device Intel(R) Iris(TM) Plus Graphics (low power)
Initializing Metal device caps: Intel(R) Iris(TM) Plus Graphics
Initialize mono
Mono path[0] = '/Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/Managed'
Mono path[1] = '/Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/MonoBleedingEdge/lib/mono/unityjit-macos'
Mono config path = '/Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/MonoBleedingEdge/etc'
Using monoOptions --debugger-agent=transport=dt_socket,embedding=1,server=y,suspend=n,address=127.0.0.1:56101
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Registering precompiled unity dll's ...
Register platform support module: /Applications/Unity/Hub/Editor/2023.1.16f1/PlaybackEngines/WebGLSupport/UnityEditor.WebGL.Extensions.dll
Register platform support module: /Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/PlaybackEngines/MacStandaloneSupport/UnityEditor.OSXStandalone.Extensions.dll
Registered in 0.002017 seconds.
- Loaded All Assemblies, in  0.591 seconds
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
icall.c:1842:
icall.c:1842:
- Finished resetting the current domain, in  0.404 seconds
Domain Reload Profiling: 995ms
	BeginReloadAssembly (145ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (0ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (1ms)
	RebuildCommonClasses (71ms)
	RebuildNativeTypeToScriptingClass (17ms)
	initialDomainReloadingComplete (84ms)
	LoadAllAssembliesAndSetupDomain (273ms)
		LoadAssemblies (144ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (267ms)
			TypeCache.Refresh (266ms)
				TypeCache.ScanAssembly (251ms)
			ScanForSourceGeneratedMonoScriptInfo (1ms)
			ResolveRequiredComponents (1ms)
	FinalizeReload (404ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (346ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (11ms)
			SetLoadedEditorAssemblies (7ms)
			BeforeProcessingInitializeOnLoad (9ms)
			ProcessInitializeOnLoadAttributes (250ms)
			ProcessInitializeOnLoadMethodAttributes (69ms)
			AfterProcessingInitializeOnLoad (0ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (0ms)
========================================================================
Worker process is ready to serve import requests
Import Worker Mode flag is 0x00
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd5230b9e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5230f0200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521c4e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523e90000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521671000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5230f0200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521aaa000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5230f6c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523107400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523e90000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521cc4000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521cc4000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524800000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524800000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5249f7000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524800000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524ab2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523107400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523107400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd523123400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521ad5000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521aaa000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524af2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521ad5000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521cc4000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524b77000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  1.084 seconds
Refreshing native plugins compatible for Editor in 1.32 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  0.753 seconds
Domain Reload Profiling: 1837ms
	BeginReloadAssembly (317ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (7ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (59ms)
	RebuildCommonClasses (50ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (46ms)
	LoadAllAssembliesAndSetupDomain (656ms)
		LoadAssemblies (307ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (418ms)
			TypeCache.Refresh (397ms)
				TypeCache.ScanAssembly (383ms)
			ScanForSourceGeneratedMonoScriptInfo (16ms)
			ResolveRequiredComponents (5ms)
	FinalizeReload (753ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (515ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (8ms)
			SetLoadedEditorAssemblies (5ms)
			BeforeProcessingInitializeOnLoad (94ms)
			ProcessInitializeOnLoadAttributes (380ms)
			ProcessInitializeOnLoadMethodAttributes (26ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (6ms)
Launching external process: /Applications/Unity/Hub/Editor/2023.1.16f1/Unity.app/Contents/Tools/UnityShaderCompiler
Launched and connected shader compiler UnityShaderCompiler after 0.08 seconds
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 1.19 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3138 Unused Serialized files (Serialized files now loaded: 0)
Unloading 32 unused Assets / (48.7 KB). Loaded Objects now: 3663.
Memory consumption went from 132.7 MB to 132.7 MB.
Total: 4.583786 ms (FindLiveObjects: 0.197809 ms CreateObjectMapping: 0.119652 ms MarkObjects: 4.119562 ms  DeleteObjects: 0.145261 ms)

AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd52641a800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526421200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520ffe000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521104000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526421200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526427c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52642e400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521104000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211a6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211a6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521293000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521293000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52148a000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521293000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521545000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526432000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526432000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526442400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521585000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211a6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52160a000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.885 seconds
Refreshing native plugins compatible for Editor in 1.24 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.325 seconds
Domain Reload Profiling: 2211ms
	BeginReloadAssembly (193ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (6ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (83ms)
	RebuildCommonClasses (47ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (26ms)
	LoadAllAssembliesAndSetupDomain (604ms)
		LoadAssemblies (294ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (372ms)
			TypeCache.Refresh (366ms)
				TypeCache.ScanAssembly (356ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (5ms)
	FinalizeReload (1326ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (759ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (10ms)
			SetLoadedEditorAssemblies (6ms)
			BeforeProcessingInitializeOnLoad (125ms)
			ProcessInitializeOnLoadAttributes (575ms)
			ProcessInitializeOnLoadMethodAttributes (41ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (9ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 1.38 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.0 KB). Loaded Objects now: 3664.
Memory consumption went from 135.5 MB to 135.4 MB.
Total: 7.476164 ms (FindLiveObjects: 0.348086 ms CreateObjectMapping: 0.270090 ms MarkObjects: 6.804522 ms  DeleteObjects: 0.050673 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd51b9aa400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51b9b0e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521018000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52456fa00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52456fa00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524576200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52115e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52115e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212d1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212d1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214c8000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212d1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521583000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51b9b4e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51b9b4e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51b9c2e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215c3000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52115e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52165a000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.873 seconds
Refreshing native plugins compatible for Editor in 1.05 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.341 seconds
Domain Reload Profiling: 2214ms
	BeginReloadAssembly (190ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (8ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (82ms)
	RebuildCommonClasses (47ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (25ms)
	LoadAllAssembliesAndSetupDomain (597ms)
		LoadAssemblies (295ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (363ms)
			TypeCache.Refresh (358ms)
				TypeCache.ScanAssembly (348ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (5ms)
	FinalizeReload (1342ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (779ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (10ms)
			SetLoadedEditorAssemblies (6ms)
			BeforeProcessingInitializeOnLoad (128ms)
			ProcessInitializeOnLoadAttributes (593ms)
			ProcessInitializeOnLoadMethodAttributes (39ms)
			AfterProcessingInitializeOnLoad (2ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (10ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.51 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.0 KB). Loaded Objects now: 3665.
Memory consumption went from 140.7 MB to 140.7 MB.
Total: 7.168147 ms (FindLiveObjects: 0.254759 ms CreateObjectMapping: 0.232569 ms MarkObjects: 6.584568 ms  DeleteObjects: 0.094522 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd526911c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526924600 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521018000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526924600 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52692b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526931800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d5000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d5000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214b9000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521574000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52373f800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52373f800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52374c800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215b4000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d5000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52169c000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.868 seconds
Refreshing native plugins compatible for Editor in 1.08 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.353 seconds
Domain Reload Profiling: 2222ms
	BeginReloadAssembly (190ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (9ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (87ms)
	RebuildCommonClasses (45ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (25ms)
	LoadAllAssembliesAndSetupDomain (594ms)
		LoadAssemblies (288ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (364ms)
			TypeCache.Refresh (359ms)
				TypeCache.ScanAssembly (349ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (5ms)
	FinalizeReload (1354ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (782ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (11ms)
			SetLoadedEditorAssemblies (5ms)
			BeforeProcessingInitializeOnLoad (127ms)
			ProcessInitializeOnLoadAttributes (595ms)
			ProcessInitializeOnLoadMethodAttributes (42ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (10ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.07 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.2 KB). Loaded Objects now: 3666.
Memory consumption went from 146.0 MB to 145.9 MB.
Total: 7.791204 ms (FindLiveObjects: 0.336874 ms CreateObjectMapping: 0.240306 ms MarkObjects: 7.157172 ms  DeleteObjects: 0.055739 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd5246ff200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524703a00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521015000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5246ff200 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524705c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52470cc00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214b9000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212c2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521574000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524710c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd524710c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526344c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215b4000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521639000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.881 seconds
Refreshing native plugins compatible for Editor in 1.15 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.320 seconds
Domain Reload Profiling: 2201ms
	BeginReloadAssembly (190ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (8ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (88ms)
	RebuildCommonClasses (46ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (25ms)
	LoadAllAssembliesAndSetupDomain (605ms)
		LoadAssemblies (286ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (377ms)
			TypeCache.Refresh (371ms)
				TypeCache.ScanAssembly (360ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (5ms)
	FinalizeReload (1321ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (773ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (12ms)
			SetLoadedEditorAssemblies (5ms)
			BeforeProcessingInitializeOnLoad (130ms)
			ProcessInitializeOnLoadAttributes (587ms)
			ProcessInitializeOnLoadMethodAttributes (37ms)
			AfterProcessingInitializeOnLoad (2ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (8ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.59 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.1 KB). Loaded Objects now: 3667.
Memory consumption went from 151.2 MB to 151.2 MB.
Total: 7.029389 ms (FindLiveObjects: 0.444263 ms CreateObjectMapping: 0.329340 ms MarkObjects: 6.059263 ms  DeleteObjects: 0.192526 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd526f1cc00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526f21400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521015000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd526f1cc00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51bf93e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51be97e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214b6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521571000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51be97e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51be97e00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51bf9bc00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215b1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52165b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.997 seconds
Refreshing native plugins compatible for Editor in 1.36 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  2.110 seconds
Domain Reload Profiling: 3107ms
	BeginReloadAssembly (189ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (9ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (80ms)
	RebuildCommonClasses (47ms)
	RebuildNativeTypeToScriptingClass (15ms)
	initialDomainReloadingComplete (26ms)
	LoadAllAssembliesAndSetupDomain (720ms)
		LoadAssemblies (345ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (434ms)
			TypeCache.Refresh (424ms)
				TypeCache.ScanAssembly (411ms)
			ScanForSourceGeneratedMonoScriptInfo (3ms)
			ResolveRequiredComponents (7ms)
	FinalizeReload (2110ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (625ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (11ms)
			SetLoadedEditorAssemblies (6ms)
			BeforeProcessingInitializeOnLoad (121ms)
			ProcessInitializeOnLoadAttributes (462ms)
			ProcessInitializeOnLoadMethodAttributes (23ms)
			AfterProcessingInitializeOnLoad (2ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (6ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.49 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.2 KB). Loaded Objects now: 3668.
Memory consumption went from 156.5 MB to 156.5 MB.
Total: 6.571909 ms (FindLiveObjects: 0.264252 ms CreateObjectMapping: 0.274064 ms MarkObjects: 5.944914 ms  DeleteObjects: 0.087431 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd527220600 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd527227800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521015000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd527231a00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd527238400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52723ec00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214b6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521571000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52723c400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52723c400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52714e800 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215b1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211bd000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521636000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.905 seconds
Refreshing native plugins compatible for Editor in 1.20 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.338 seconds
Domain Reload Profiling: 2243ms
	BeginReloadAssembly (191ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (7ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (86ms)
	RebuildCommonClasses (45ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (25ms)
	LoadAllAssembliesAndSetupDomain (629ms)
		LoadAssemblies (286ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (402ms)
			TypeCache.Refresh (395ms)
				TypeCache.ScanAssembly (384ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (6ms)
	FinalizeReload (1339ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (799ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (13ms)
			SetLoadedEditorAssemblies (6ms)
			BeforeProcessingInitializeOnLoad (138ms)
			ProcessInitializeOnLoadAttributes (603ms)
			ProcessInitializeOnLoadMethodAttributes (38ms)
			AfterProcessingInitializeOnLoad (2ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (11ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.14 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.0 KB). Loaded Objects now: 3669.
Memory consumption went from 161.7 MB to 161.7 MB.
Total: 6.911248 ms (FindLiveObjects: 0.368917 ms CreateObjectMapping: 0.338665 ms MarkObjects: 6.058549 ms  DeleteObjects: 0.142862 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
========================================================================
Received Prepare
Begin MonoManager ReloadAssembly
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
icall.c:1842:
Symbol file data-0x7fd5265e4400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.CollabProxy.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5265e8c00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.EditorCoroutines.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521015000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Performance.Profile-Analyzer.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.PlasticSCM.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520efc000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Rider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5265e4400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Settings.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5265eae00 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Model.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5265f4600 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TestTools.CodeCoverage.Editor.OpenCover.Mono.Reflection.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd52111b000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.TextMeshPro.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.Timeline.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5214b6000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Core.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5212bf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521571000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Flow.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51ccba400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.SettingsProvider.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51ccba400 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.Shared.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd51cca9600 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualScripting.State.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520faf000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/Unity.VisualStudio.Editor.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5215b1000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd520f8e000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEditor.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd5211d2000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.TestRunner.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file data-0x7fd521658000 doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/ScriptAssemblies/UnityEngine.UI.dll
Symbol file LoadedFromMemory is not a mono symbol file
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/YamlDotNet/Unity.VisualScripting.YamlDotNet.dll
Symbol file LoadedFromMemory doesn't match image /Users/thomasfagan/Developer/NASAChallenge2023/My project/Library/PackageCache/com.unity.visualscripting@1.8.0/Editor/VisualScripting.Core/Dependencies/DotNetZip/Unity.VisualScripting.IonicZip.dll
- Loaded All Assemblies, in  0.887 seconds
Refreshing native plugins compatible for Editor in 1.20 ms, found 2 plugins.
Native extension for OSXStandalone target not found
Native extension for WebGL target not found
Mono: successfully reloaded assembly
- Finished resetting the current domain, in  1.298 seconds
Domain Reload Profiling: 2184ms
	BeginReloadAssembly (191ms)
		ExecutionOrderSort (0ms)
		DisableScriptedObjects (8ms)
		BackupInstance (0ms)
		ReleaseScriptingObjects (0ms)
		CreateAndSetChildDomain (88ms)
	RebuildCommonClasses (46ms)
	RebuildNativeTypeToScriptingClass (14ms)
	initialDomainReloadingComplete (25ms)
	LoadAllAssembliesAndSetupDomain (610ms)
		LoadAssemblies (291ms)
		RebuildTransferFunctionScriptingTraits (0ms)
		AnalyzeDomain (378ms)
			TypeCache.Refresh (372ms)
				TypeCache.ScanAssembly (360ms)
			ScanForSourceGeneratedMonoScriptInfo (0ms)
			ResolveRequiredComponents (6ms)
	FinalizeReload (1298ms)
		ReleaseScriptCaches (0ms)
		RebuildScriptCaches (0ms)
		SetupLoadedEditorAssemblies (793ms)
			LogAssemblyErrors (0ms)
			InitializePlatformSupportModulesInManaged (10ms)
			SetLoadedEditorAssemblies (7ms)
			BeforeProcessingInitializeOnLoad (136ms)
			ProcessInitializeOnLoadAttributes (603ms)
			ProcessInitializeOnLoadMethodAttributes (36ms)
			AfterProcessingInitializeOnLoad (1ms)
			EditorAssembliesLoaded (0ms)
		ExecutionOrderSort2 (0ms)
		AwakeInstancesAfterBackupRestoration (10ms)
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 79
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 122
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 160
Shader warning in 'Tessellation/Tess_Standard': #pragma target with unknown target: #pragma target gl4 .1 at line 191
program_source:122:56: error: no member named 'mtl_Position' in 'Mtl_VertexOut'
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
                              ~~~~~~~~~~~~~~~~~~~~~~~~ ^
program_source:284:51: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
                                      ~~~~~~~~~~~ ^
program_source:285:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:286:35: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
                      ~~~~~~~~~~~ ^
program_source:287:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:291:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
                                   ~~~~~~~~~~~ ^
program_source:295:48: error: no member named 'POS0' in 'Mtl_ControlPointIn'
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
                                   ~~~~~~~~~~~ ^



#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Mtl_VertexIn
{
    float4 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_VertexOut
{
    float4 POS0 [[ user(POS0) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
static Mtl_VertexOut vertexFunction(
    Mtl_VertexIn input)
{
    Mtl_VertexOut output;
    output.POS0 = input.POSITION0;
    output.NORMAL0.xyz = input.NORMAL0.xyz;
    output.TEXCOORD0.xy = input.TEXCOORD0.xy;
    return output;
}
// SHADER_STAGE_HULL_begin
struct Mtl_ControlPoint
{
    float4 mtl_Position [[ user(mtl_Position) ]];
    float3 NORMAL0 [[ user(NORMAL0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
};
struct Mtl_ControlPointIn
{
    float4 mtl_Position [[ attribute(3) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float2 TEXCOORD0 [[ attribute(2) ]] ;
};
struct Mtl_KernelPatchInfo
{
    uint numPatches;
    ushort numControlPointsPerPatch;
};
struct VGlobals_Type
{
    float4 unity_Lightmap_HDR;
    float4 unity_DynamicLightmap_HDR;
    float4 _Color;
    float _Cutoff;
    float4 _MainTex_ST;
    float4 _SpecColor;
    float _Metallic;
    float _Tess;
    float _maxDist;
    float _ShadowLOD;
    float _Displacement;
    float _DispOffset;
    float _Phong;
};
struct UnityPerCamera_Type
{
    float4 _Time;
    float4 _SinTime;
    float4 _CosTime;
    float4 unity_DeltaTime;
    float3 _WorldSpaceCameraPos;
    float4 _ProjectionParams;
    float4 _ScreenParams;
    float4 _ZBufferParams;
    float4 unity_OrthoParams;
};
struct UnityPerDraw_Type
{
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 unity_LODFade;
    float4 unity_WorldTransformParams;
    float4 unity_RenderingLayer;
};
struct Mtl_HullIn
{
    Mtl_VertexOut cp[3];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
kernel void patchKernel(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    Mtl_VertexIn vertexInput [[ stage_in ]],
    uint2 tID [[ thread_position_in_grid ]],
    ushort2 groupID [[ threadgroup_position_in_grid ]],
    device Mtl_ControlPoint *controlPoints [[ buffer(3) ]],
    device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(4) ]],
    constant Mtl_KernelPatchInfo &patchInfo [[ buffer(5) ]])
{
#pragma clang diagnostic pop
    Mtl_ControlPoint output;
    const uint numPatchesInThreadGroup = 10;
    const uint patchID = (tID.x / patchInfo.numControlPointsPerPatch);
    const bool patchValid = (patchID < patchInfo.numPatches);
    const uint mtl_BaseInstance = 0;
    const uint mtl_InstanceID = groupID.y - mtl_BaseInstance;
    const uint internalPatchID = mtl_InstanceID * patchInfo.numPatches + patchID;
    const uint patchIDInThreadGroup = (patchID % numPatchesInThreadGroup);
    const uint controlPointID = (tID.x % patchInfo.numControlPointsPerPatch);
    const uint mtl_BaseVertex = 0;
    const uint mtl_VertexID = ((mtl_InstanceID * (patchInfo.numControlPointsPerPatch * patchInfo.numPatches)) + tID.x) - mtl_BaseVertex;
    threadgroup Mtl_HullIn inputGroup[numPatchesInThreadGroup];
    threadgroup Mtl_HullIn &input = inputGroup[patchIDInThreadGroup];
    MTLTriangleTessellationFactorsHalf tessFactor;
    if (patchValid) {
        input.cp[controlPointID] = vertexFunction(vertexInput);
        output.mtl_Position = input.cp[controlPointID].mtl_Position;
        output.NORMAL0 = input.cp[controlPointID].NORMAL0;
        output.TEXCOORD0 = input.cp[controlPointID].TEXCOORD0;
    }
    threadgroup_barrier(mem_flags::mem_threadgroup);
    if (!patchValid) {
        return;
    }
    float3 u_xlat0;
    float3 u_xlat1;
    float u_xlat2;
    float3 u_xlat3;
    float u_xlat4;
    float u_xlat6;
    // fork_phase2
    {
        u_xlat0.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[1].POS0.yyy;
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[1].POS0.xxx, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[1].POS0.zzz, u_xlat0.xyz);
        u_xlat0.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[1].POS0.www, u_xlat0.xyz);
        u_xlat0.xyz = u_xlat0.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
        u_xlat0.x = sqrt(u_xlat0.x);
        u_xlat0.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat0.x);
        u_xlat2 = VGlobals._maxDist * 1.0;
        u_xlat0.x = u_xlat0.x / u_xlat2;
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat0.x = max(u_xlat0.x, 0.00999999978);
        u_xlat1.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[2].POS0.yyy;
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[2].POS0.xxx, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[2].POS0.zzz, u_xlat1.xyz);
        u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[2].POS0.www, u_xlat1.xyz);
        u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat4 = dot(u_xlat1.xyz, u_xlat1.xyz);
        u_xlat4 = sqrt(u_xlat4);
        u_xlat4 = fma((-VGlobals._maxDist), 0.200000003, u_xlat4);
        u_xlat4 = u_xlat4 / u_xlat2;
        u_xlat4 = (-u_xlat4) + 1.0;
        u_xlat0.z = max(u_xlat4, 0.00999999978);
        u_xlat0.xz = min(u_xlat0.xz, float2(1.0, 1.0));
        u_xlat6 = (-VGlobals._Tess) + 1.0;
        u_xlat6 = fma(VGlobals._ShadowLOD, u_xlat6, VGlobals._Tess);
        u_xlat1.x = u_xlat6 * u_xlat0.z;
        u_xlat3.x = fma(u_xlat0.x, u_xlat6, u_xlat1.x);
        u_xlat0.x = u_xlat6 * u_xlat0.x;
        tessFactor.edgeTessellationFactor[0] = u_xlat3.x * 0.5;
        u_xlat3.xyz = UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz * input.cp[0].POS0.yyy;
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, input.cp[0].POS0.xxx, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, input.cp[0].POS0.zzz, u_xlat3.xyz);
        u_xlat3.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3].xyz, input.cp[0].POS0.www, u_xlat3.xyz);
        u_xlat3.xyz = u_xlat3.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
        u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat3.x = sqrt(u_xlat3.x);
        u_xlat3.x = fma((-VGlobals._maxDist), 0.200000003, u_xlat3.x);
        u_xlat2 = u_xlat3.x / u_xlat2;
        u_xlat2 = (-u_xlat2) + 1.0;
        u_xlat2 = max(u_xlat2, 0.00999999978);
        u_xlat2 = min(u_xlat2, 1.0);
        u_xlat1.x = fma(u_xlat2, u_xlat6, u_xlat1.x);
        u_xlat0.x = fma(u_xlat2, u_xlat6, u_xlat0.x);
        u_xlat2 = fma(u_xlat0.z, u_xlat6, u_xlat0.x);
        tessFactor.edgeTessellationFactor[2] = u_xlat0.x * 0.5;
        tessFactor.insideTessellationFactor = u_xlat2 * 0.333333343;
        tessFactor.edgeTessellationFactor[1] = u_xlat1.x * 0.5;
    }
    controlPoints[mtl_VertexID] = output;
    tessFactors[internalPatchID] = tessFactor;
}
// SHADER_STAGE_HULL_end
// SHADER_STAGE_DOMAIN_begin
struct UnityLighting_Type
{
    float4 _WorldSpaceLightPos0;
    float4 _LightPositionRange;
    float4 _LightProjectionParams;
    float4 unity_4LightPosX0;
    float4 unity_4LightPosY0;
    float4 unity_4LightPosZ0;
    float4 unity_4LightAtten0;
    float4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 unity_SHAr;
    float4 unity_SHAg;
    float4 unity_SHAb;
    float4 unity_SHBr;
    float4 unity_SHBg;
    float4 unity_SHBb;
    float4 unity_SHC;
    float4 unity_OcclusionMaskSelector;
    float4 unity_ProbesOcclusion;
};
struct UnityShadows_Type
{
    float4 unity_ShadowSplitSpheres[4];
    float4 unity_ShadowSplitSqRadii;
    float4 unity_LightShadowBias;
    float4 _LightSplitsNear;
    float4 _LightSplitsFar;
    float4 hlslcc_mtx4x4unity_WorldToShadow[16];
    float4 _LightShadowData;
    float4 unity_ShadowFadeCenterAndType;
};
struct UnityPerFrame_Type
{
    float4 glstate_lightmodel_ambient;
    float4 unity_AmbientSky;
    float4 unity_AmbientEquator;
    float4 unity_AmbientGround;
    float4 unity_IndirectSpecColor;
    float4 hlslcc_mtx4x4glstate_matrix_projection[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    int unity_StereoEyeIndex;
    float4 unity_ShadowColor;
};
struct Mtl_VertexInPostTess
{
    patch_control_point<Mtl_ControlPointIn> cp;
};
struct Mtl_VertexOutPostTess
{
    float4 mtl_Position [[ position ]];
};
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
[[patch(triangle, 3)]] vertex Mtl_VertexOutPostTess xlatMtlMain(
    constant VGlobals_Type& VGlobals [[ buffer(0) ]],
    constant UnityPerCamera_Type& UnityPerCamera [[ buffer(1) ]],
    constant UnityPerDraw_Type& UnityPerDraw [[ buffer(2) ]],
    constant UnityLighting_Type& UnityLighting [[ buffer(3) ]],
    constant UnityShadows_Type& UnityShadows [[ buffer(4) ]],
    constant UnityPerFrame_Type& UnityPerFrame [[ buffer(5) ]],
    sampler sampler_ParallaxMap [[ sampler (0) ]],
    texture2d<float, access::sample > _ParallaxMap [[ texture(0) ]] ,
    float3 mtl_TessCoord [[ position_in_patch ]],
    uint patchID [[ patch_id ]],
    const device Mtl_ControlPoint *controlPoints [[ buffer(6) ]],
    const device MTLTriangleTessellationFactorsHalf *tessFactors [[ buffer(7) ]],
    Mtl_VertexInPostTess input [[ stage_in ]])
{
#pragma clang diagnostic pop
    Mtl_VertexOutPostTess output;
    MTLTriangleTessellationFactorsHalf tessFactor;
    tessFactor = tessFactors[patchID];
    float4 u_xlat0;
    float4 u_xlat1;
    float4 u_xlat2;
    float3 u_xlat3;
    float3 u_xlat5;
    float u_xlat8;
    float u_xlat12;
    float u_xlat13;
    bool u_xlatb13;
    u_xlat0.xyz = mtl_TessCoord.yyy * input.cp[1].POS0.xyz;
    u_xlat0.xyz = fma(input.cp[0].POS0.xyz, mtl_TessCoord.xxx, u_xlat0.xyz);
    u_xlat0.xyz = fma(input.cp[2].POS0.xyz, mtl_TessCoord.zzz, u_xlat0.xyz);
    u_xlat1.xyz = (-u_xlat0.xyz) + input.cp[1].POS0.xyz;
    u_xlat12 = dot(u_xlat1.xyz, input.cp[1].NORMAL0.xyz);
    u_xlat1.xyz = float3(u_xlat12) * input.cp[1].NORMAL0.xyz;
    u_xlat1.xyz = u_xlat1.xyz * mtl_TessCoord.yyy;
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[0].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[0].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[0].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.xxx, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat2.xyz = (-u_xlat0.xyz) + input.cp[2].POS0.xyz;
    u_xlat12 = dot(u_xlat2.xyz, input.cp[2].NORMAL0.xyz);
    u_xlat2.xyz = float3(u_xlat12) * input.cp[2].NORMAL0.xyz;
    u_xlat1.xyz = fma(mtl_TessCoord.zzz, u_xlat2.xyz, u_xlat1.xyz);
    u_xlat0.xyz = fma(u_xlat1.xyz, float3(VGlobals._Phong), u_xlat0.xyz);
    u_xlat1.xyz = u_xlat0.yyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, u_xlat0.xxx, u_xlat1.xyz);
    u_xlat1.xyz = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, u_xlat0.zzz, u_xlat1.xyz);
    u_xlat1.xyz = u_xlat1.xyz + (-UnityPerCamera._WorldSpaceCameraPos.xyzx.xyz);
    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = (-u_xlat12) + VGlobals._maxDist;
    u_xlat1.x = VGlobals._maxDist * 0.699999988;
    u_xlat12 = u_xlat12 / u_xlat1.x;
    u_xlat12 = clamp(u_xlat12, 0.0f, 1.0f);
    u_xlat1.xy = mtl_TessCoord.yy * input.cp[1].TEXCOORD0.xy;
    u_xlat1.xy = fma(input.cp[0].TEXCOORD0.xy, mtl_TessCoord.xx, u_xlat1.xy);
    u_xlat1.xy = fma(input.cp[2].TEXCOORD0.xy, mtl_TessCoord.zz, u_xlat1.xy);
    u_xlat1.xy = fma(u_xlat1.xy, VGlobals._MainTex_ST.xy, VGlobals._MainTex_ST.zw);
    u_xlat1.x = _ParallaxMap.sample(sampler_ParallaxMap, u_xlat1.xy, level(0.0)).y;
    u_xlat1.x = u_xlat1.x * VGlobals._Displacement;
    u_xlat1.x = fma(u_xlat1.x, 0.5, VGlobals._DispOffset);
    u_xlat1.x = u_xlat1.x + -0.5;
    u_xlat5.xyz = mtl_TessCoord.yyy * input.cp[1].NORMAL0.xyz;
    u_xlat5.xyz = fma(input.cp[0].NORMAL0.xyz, mtl_TessCoord.xxx, u_xlat5.xyz);
    u_xlat5.xyz = fma(input.cp[2].NORMAL0.xyz, mtl_TessCoord.zzz, u_xlat5.xyz);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat5.xyz;
    u_xlat0.xyz = fma(u_xlat2.xyz, float3(u_xlat12), u_xlat0.xyz);
    u_xlat2 = u_xlat0.yyyy * UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat2 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[0], u_xlat0.xxxx, u_xlat2);
    u_xlat0 = fma(UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[2], u_xlat0.zzzz, u_xlat2);
    u_xlat0 = u_xlat0 + UnityPerDraw.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2.xyz = fma((-u_xlat0.xyz), UnityLighting._WorldSpaceLightPos0.www, UnityLighting._WorldSpaceLightPos0.xyz);
    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
    u_xlat3.x = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat3.y = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat3.z = dot(u_xlat5.xyz, UnityPerDraw.hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat1.x = rsqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;
    u_xlat13 = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat13 = fma((-u_xlat13), u_xlat13, 1.0);
    u_xlat13 = sqrt(u_xlat13);
    u_xlat13 = u_xlat13 * UnityShadows.unity_LightShadowBias.z;
    u_xlat1.xyz = fma((-u_xlat1.xyz), float3(u_xlat13), u_xlat0.xyz);
    u_xlatb13 = UnityShadows.unity_LightShadowBias.z!=0.0;
    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat1 = u_xlat0.yyyy * UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[0], u_xlat0.xxxx, u_xlat1);
    u_xlat1 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[2], u_xlat0.zzzz, u_xlat1);
    u_xlat0 = fma(UnityPerFrame.hlslcc_mtx4x4unity_MatrixVP[3], u_xlat0.wwww, u_xlat1);
    u_xlat1.x = UnityShadows.unity_LightShadowBias.x / u_xlat0.w;
    u_xlat1.x = min(u_xlat1.x, 0.0);
    u_xlat1.x = max(u_xlat1.x, -1.0);
    u_xlat8 = u_xlat0.z + u_xlat1.x;
    u_xlat1.x = min(u_xlat0.w, u_xlat8);
    output.mtl_Position.xyw = u_xlat0.xyw;
    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
    output.mtl_Position.z = fma(UnityShadows.unity_LightShadowBias.y, u_xlat0.x, u_xlat8);
    return output;
}
// SHADER_STAGE_DOMAIN_end
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 78
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 120
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 157
Shader warning in 'Tessellation/Tess_Standard_Specular': #pragma target with unknown target: #pragma target gl4 .1 at line 188
Refreshing native plugins compatible for Editor in 2.38 ms, found 2 plugins.
Preloading 0 native plugins for Editor in 0.00 ms.
Unloading 3127 Unused Serialized files (Serialized files now loaded: 0)
Unloading 22 unused Assets / (31.2 KB). Loaded Objects now: 3670.
Memory consumption went from 167.0 MB to 167.0 MB.
Total: 7.728043 ms (FindLiveObjects: 0.545602 ms CreateObjectMapping: 0.342098 ms MarkObjects: 6.517393 ms  DeleteObjects: 0.320173 ms)

Prepare: number of updated asset objects reloaded= 0
AssetImportParameters requested are different than current active one (requested -> active):
  custom:video-decoder-webm-vp8: 9c59270c3fd7afecdb556c50c9e8de78 -> 
  custom:SearchIndexIgnoredProperties: e643bd26f0fe6173181afceb89e7c659 -> 
  custom:audio-encoder-webm-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:AudioImporter_EditorPlatform: 3918e3fc78b5a79bad01e8451be0beb8 -> 
  custom:audio-decoder-ogg-vorbis: bf7c407c2cedff20999df2af8eb42d56 -> 
  custom:video-encoder-webm-vp8: eb34c28f22e8b96e1ab97ce403110664 -> 
  custom:container-demuxer-ogg: 62fdf1f143b41e24485cea50d1cbac27 -> 
  custom:video-decoder-ogg-theora: a1e56fd34408186e4bbccfd4996cb3dc -> 
  custom:framework-osx-AVFoundation: e770b220cccbd017edd2c1fefb359320 -> 
  custom:container-muxer-webm: aa71ff27fc2769a1b78a27578f13a17b -> 
  custom:CustomObjectIndexerAttribute: 756ad292c208cfabdd7b50bc23989ffe -> 
  custom:container-demuxer-webm: 4f35f7cbe854078d1ac9338744f61a02 -> 
